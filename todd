#!/usr/bin/env python3

from socketserver import TCPServer
from http.server import BaseHTTPRequestHandler
import subprocess as sp
from sys import *

class ToddHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        stderr.write('Client has connected.\n')
        self.send_response(200, message=b'*sigh*, faaaain...')
        self.end_headers()
        p = sp.Popen(argv[2:], stdout=sp.PIPE)
        while True:
            data = p.stdout.read(1024)
            if len(data) == 0:
                break

            try:
                self.wfile.write(data)
            except BrokenPipeError:
                break
            except ConnectionResetError:
                break
        stderr.write('Client has disconnected.\n')
        p.stdout.close()
        # The previous call is enough to stop the command, but it will be a 
        # zombie until after the exit code is read. This is what this last 
        # p.wait() call is for. DIE ZOMBIES!!
        p.wait()

def help_text():
    print("\ntodd repeatedly serves the stdout of a local command over http")
    print("press Ctrl-C to stop. Otherwise todd will re-run the command on each request\n")
    print("Examples:")
    print("Share a file. A coworker can download by visiting http://my-machine:8080/myfile.tar.gz")
    print(" (if no filename in the url is option, but helpful)")
    print("    todd 8080 cat myfile.tar.gz\n")
    print("Share a compressed folder. A coworker can download by visiting http://my-machine:8080/whatever.tar.gz)")
    print("    todd 8080 tar -cz ~/project/\n")    
        
if len(argv) < 3:
    stderr.write('usage: todd port command [arg1 arg2 ...]\n')
    help_text()
    exit(1)

# Create the server.
server = TCPServer(('', int(argv[1])), ToddHandler)

# Activate the server; this will keep running until you
# interrupt the program with Ctrl-C
server.serve_forever()
